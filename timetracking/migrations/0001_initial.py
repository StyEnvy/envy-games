# Generated by Django 5.1.11 on 2025-09-07 19:11

import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TrackedProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255, unique=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('external_ref', models.CharField(blank=True, db_index=True, help_text='External project id/slug (no FK).', max_length=255, null=True, unique=True)),
                ('source_project_id', models.PositiveIntegerField(blank=True, db_index=True, help_text='Original projects.Project id (no FK).', null=True, unique=True)),
            ],
            options={
                'ordering': ['title'],
                'indexes': [models.Index(fields=['title'], name='tt_idx_proj_title'), models.Index(fields=['is_active', 'title'], name='tt_idx_proj_active_title')],
            },
        ),
        migrations.CreateModel(
            name='TrackedTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('external_ref', models.CharField(blank=True, help_text='External task id/slug (no FK).', max_length=255, null=True)),
                ('source_task_id', models.PositiveIntegerField(blank=True, db_index=True, help_text='Original projects.Task id (no FK).', null=True, unique=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='timetracking.trackedproject')),
            ],
            options={
                'ordering': ['title', 'id'],
            },
        ),
        migrations.CreateModel(
            name='TimeEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('work_date', models.DateField(db_index=True, default=django.utils.timezone.localdate)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Exact minutes.')),
                ('billable', models.BooleanField(db_index=True, default=False)),
                ('notes', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_entries', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='entries', to='timetracking.trackedproject')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='entries', to='timetracking.trackedtask')),
            ],
            options={
                'ordering': ['-work_date', '-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='trackedtask',
            index=models.Index(fields=['project', 'title'], name='tt_idx_task_proj_title'),
        ),
        migrations.AddIndex(
            model_name='trackedtask',
            index=models.Index(fields=['project', 'slug'], name='tt_idx_task_proj_slug'),
        ),
        migrations.AddIndex(
            model_name='trackedtask',
            index=models.Index(fields=['is_active', 'project'], name='tt_idx_task_active_proj'),
        ),
        migrations.AddConstraint(
            model_name='trackedtask',
            constraint=models.UniqueConstraint(fields=('project', 'slug'), name='tt_uq_task_slug_per_project'),
        ),
        migrations.AddConstraint(
            model_name='trackedtask',
            constraint=models.UniqueConstraint(fields=('project', 'external_ref'), name='tt_uq_task_extref_per_project'),
        ),
        migrations.AddIndex(
            model_name='timeentry',
            index=models.Index(fields=['project', 'work_date'], name='tt_idx_entry_project_date'),
        ),
        migrations.AddIndex(
            model_name='timeentry',
            index=models.Index(fields=['task', 'work_date'], name='tt_idx_entry_task_date'),
        ),
        migrations.AddIndex(
            model_name='timeentry',
            index=models.Index(fields=['user', 'work_date'], name='tt_idx_entry_user_date'),
        ),
        migrations.AddIndex(
            model_name='timeentry',
            index=models.Index(fields=['billable', 'work_date'], name='tt_idx_entry_billable_date'),
        ),
        migrations.AddIndex(
            model_name='timeentry',
            index=models.Index(fields=['project', 'task', 'work_date'], name='tt_idx_entry_proj_task_date'),
        ),
        migrations.AddConstraint(
            model_name='timeentry',
            constraint=models.CheckConstraint(condition=models.Q(('duration_minutes__gt', 0)), name='tt_chk_positive_minutes'),
        ),
    ]
