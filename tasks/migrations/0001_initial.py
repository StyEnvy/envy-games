# Generated by Django 5.1.11 on 2025-09-03 03:02

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('kind', models.CharField(choices=[('task', 'Task'), ('roadmap', 'Roadmap')], max_length=16)),
                ('is_default', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=1000)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='Column',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('wip_limit', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=1000)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='columns', to='tasks.board')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Label',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('color', models.CharField(blank=True, max_length=9, validators=[django.core.validators.RegexValidator(message='Color must be a hex value like #RRGGBB or #RRGGBBAA.', regex='^#(?:[0-9a-fA-F]{6}|[0-9a-fA-F]{8})$')])),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kind', models.CharField(choices=[('task', 'Task'), ('idea', 'Idea'), ('epic', 'Epic')], default='task', max_length=8)),
                ('title', models.CharField(max_length=240)),
                ('description', models.TextField(blank=True)),
                ('status', models.CharField(blank=True, choices=[('todo', 'To Do'), ('doing', 'Doing'), ('review', 'Review'), ('done', 'Done')], max_length=8)),
                ('priority', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'P1'), (2, 'P2'), (3, 'P3')], null=True)),
                ('impact', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('confidence', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('ease', models.PositiveSmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('score', models.PositiveIntegerField(default=0)),
                ('order_hint', models.PositiveIntegerField(default=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assignee', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('labels', models.ManyToManyField(blank=True, related_name='tasks', to='tasks.label')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='tasks.task')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='projects.project')),
            ],
        ),
        migrations.CreateModel(
            name='Subtask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('is_done', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=1000)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subtasks', to='tasks.task')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tasks.task')),
            ],
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=1000)),
                ('version_label', models.CharField(blank=True, max_length=64)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tasks.board')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='projects.project')),
                ('column', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='cards', to='tasks.column')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tasks.task')),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='attachments/%Y/%m/')),
                ('size_bytes', models.BigIntegerField()),
                ('mime_type', models.CharField(max_length=120)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='tasks.task')),
            ],
        ),
        migrations.AddIndex(
            model_name='board',
            index=models.Index(fields=['project', 'kind', 'order'], name='tasks_board_project_e9d0e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='column',
            unique_together={('board', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='label',
            unique_together={('project', 'name')},
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['project', 'kind', 'order_hint'], name='tasks_task_project_90b095_idx'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('impact__isnull', True), models.Q(('impact__gte', 1), ('impact__lte', 5)), _connector='OR'), name='task_impact_1_5_or_null'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('confidence__isnull', True), models.Q(('confidence__gte', 1), ('confidence__lte', 5)), _connector='OR'), name='task_confidence_1_5_or_null'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.CheckConstraint(condition=models.Q(('ease__isnull', True), models.Q(('ease__gte', 1), ('ease__lte', 5)), _connector='OR'), name='task_ease_1_5_or_null'),
        ),
        migrations.AddIndex(
            model_name='card',
            index=models.Index(fields=['project', 'board', 'column', 'order'], name='tasks_card_project_884013_idx'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.UniqueConstraint(fields=('item', 'board'), name='uniq_item_per_board'),
        ),
    ]
